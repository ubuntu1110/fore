import React, { useState } from 'react';

interface RecruitmentModalProps {
    isOpen: boolean;
    onClose: () => void;
}

const RecruitmentModal: React.FC<RecruitmentModalProps> = ({ isOpen, onClose }) => {
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        phone: '',
        message: '',
    });
    const [isSubmitted, setIsSubmitted] = useState(false);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!formData.name || !formData.email || !formData.phone || !formData.message) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram-–±–æ—Ç–∞
        try {
            const telegramToken = 'YOUR_TELEGRAM_BOT_TOKEN'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
            const chatId = 'YOUR_CHAT_ID'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
            const messageToSend = `
üìÑ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É*:
- üë§ –ò–º—è: ${formData.name}
- üìß Email: ${formData.email}
- üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
- üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}
            `;

            await fetch(
                `https://api.telegram.org/bot${telegramToken}/sendMessage`,
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: messageToSend,
                        parse_mode: 'Markdown',
                    }),
                }
            );

            setIsSubmitted(true);
        } catch (error) {
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    };

    if (!isOpen) return null;

    return (
        <div
            className="fixed inset-0 z-50 flex items-center justify-center bg-black/50"
            onClick={onClose} // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ —Ñ–æ—Ä–º—ã
        >
            <div
                className="bg-dark-bg text-light-green p-6 rounded-lg shadow-lg relative"
                onClick={(e) => e.stopPropagation()} // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ñ–æ—Ä–º—É
            >
                {isSubmitted ? (
                    <div className="text-center">
                        <h2 className="text-2xl font-bold mb-4">–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!</h2>
                        <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
                        <button
                            className="mt-4 bg-primary text-white px-6 py-2 rounded-lg hover:bg-secondary transition"
                            onClick={onClose}
                        >
                            –ó–∞–∫—Ä—ã—Ç—å
                        </button>
                    </div>
                ) : (
                    <form onSubmit={handleSubmit}>
                        <h2 className="text-2xl font-bold mb-4">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É</h2>
                        <div className="mb-4">
                            <label htmlFor="name" className="block mb-2">–ò–º—è</label>
                            <input
                                type="text"
                                id="name"
                                name="name"
                                value={formData.name}
                                onChange={handleChange}
                                className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white"
                            />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="email" className="block mb-2">Email</label>
                            <input
                                type="email"
                                id="email"
                                name="email"
                                value={formData.email}
                                onChange={handleChange}
                                className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white"
                            />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="phone" className="block mb-2">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                            <input
                                type="text"
                                id="phone"
                                name="phone"
                                value={formData.phone}
                                onChange={handleChange}
                                className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white"
                            />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="message" className="block mb-2">–°–æ–æ–±—â–µ–Ω–∏–µ</label>
                            <textarea
                                id="message"
                                name="message"
                                value={formData.message}
                                onChange={handleChange}
                                className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white"
                            />
                        </div>
                        <button
                            type="submit"
                            className="bg-primary text-white px-6 py-2 rounded-lg hover:bg-secondary transition"
                        >
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ
                        </button>
                    </form>
                )}
            </div>
        </div>
    );
};

export default RecruitmentModal;
